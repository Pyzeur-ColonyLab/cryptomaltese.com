version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: cryptomaltese-db
    environment:
      POSTGRES_DB: cryptomaltese
      POSTGRES_USER: cryptomaltese_user
      POSTGRES_PASSWORD: cryptomaltese_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptomaltese_user -d cryptomaltese"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cryptomaltese-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://cryptomaltese_user:cryptomaltese_password@database:5432/cryptomaltese
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-fallback-jwt-secret}
      SESSION_SECRET: ${SESSION_SECRET:-fallback-session-secret}
      GRAPH_SERVICE_URL: http://graphservice:8000
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Graph Service (Optional - start manually)
  graphservice:
    build: ./graph_service
    container_name: cryptomaltese-graph
    environment:
      DATABASE_URL: postgresql://cryptomaltese_user:cryptomaltese_password@database:5432/cryptomaltese
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY}
      LOG_LEVEL: INFO
      NODE_SERVICE_URL: http://api:3000
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - graph  # Only start when explicitly requested

volumes:
  postgres_data:

networks:
  default:
    driver: bridge
